package pattern

import "fmt"

/*
	Реализовать паттерн «команда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern

Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты,
позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их,
а также поддерживать отмену операций.

Плюсы:
- Убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют.
- Позволяет реализовать простую отмену и повтор операций.
- Позволяет реализовать отложенный запуск операций.
- Позволяет собирать сложные команды из простых.
- Реализует принцип открытости/закрытости.

Минусы:
- Усложняет код программы из-за введения множества дополнительных классов.

Реализацию паттерна представим в виде телевизора, у которого есть кнопка вкл/выкл
*/

//Интерфейс команды

type Command interface {
	execute()
}

// Отправитель запроса

type Button struct {
	command Command
}

func (b *Button) press() {
	b.command.execute()
}

// Интерфейс получателя

type Device interface {
	on()
	off()
}

// Конкретная команда включения

type OnCommand struct {
	device Device
}

func (on *OnCommand) execute() {
	on.device.on()
}

// Конкретная команда выключения

type OffCommand struct {
	device Device
}

func (off *OffCommand) execute() {
	off.device.off()
}

// Структура с "бизнес-логикой" или просто телевизор в нашем случае

type Tv struct {
	isRunning bool
}

func (t *Tv) on() {
	t.isRunning = true
	fmt.Println("Включить телевизор")
}

func (t *Tv) off() {
	t.isRunning = false
	fmt.Println("Выключить телевизор")
}

func CommandPattern() {
	// Создаем объект структуры, которой будем управлять
	tv := &Tv{}

	// Определяем конкретную команду на включение телевизору
	onCommand := &OnCommand{
		device: tv,
	}

	// Определяем конкретную команду на выключение телевизору
	offCommand := &OffCommand{
		device: tv,
	}

	// Создаем объект запроса на включение телевизора
	onButton := &Button{
		command: onCommand,
	}

	onButton.press()

	// Создаем объект запроса на выключение телевизора
	offButton := &Button{
		command: offCommand,
	}

	offButton.press()
}
